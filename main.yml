---
# Automated setup of a Beowulf AI Cluster.

- name: Compile llama.cpp.
  hosts: cluster
  become: false
  tags: ['setup']

  vars_files: ['config.yml']

  tasks:
    - ansible.builtin.include_tasks: dependencies/rhel-based.yml
      when: ansible_os_family == 'RedHat'

    - ansible.builtin.include_tasks: dependencies/debian-based.yml
      when: ansible_os_family == 'Debian'

    - ansible.builtin.include_tasks: dependencies/arch-based.yml
      when: ansible_os_family == 'Archlinux'

    - name: Ensure working directory exists.
      ansible.builtin.file:
        path: "{{ working_dir }}"
        state: directory
      become: true

    - name: Clone llama.cpp.
      ansible.builtin.git:
        repo: "{{ llama_source }}"
        dest: "{{ working_dir }}/llama.cpp"
        version: "{{ llama_version }}"
      become: true

    - name: Create llama.cpp build directory.
      ansible.builtin.file:
        path: "{{ working_dir }}/llama.cpp/build"
        state: directory
        mode: 0755
      become: true

    - name: Configure the build.
      ansible.builtin.command:
        cmd: "cmake -B build {{ llama_build_opts }}"
        chdir: "{{ working_dir }}/llama.cpp"
        creates: "{{ working_dir }}/llama.cpp/LLAMA_BUILD_COMPLETE"
      become: true

    - name: Build llama.cpp.
      ansible.builtin.command:
        cmd: cmake --build build --config Release
        chdir: "{{ working_dir }}/llama.cpp"
        creates: "{{ working_dir }}/llama.cpp/LLAMA_BUILD_COMPLETE"
      become: true

    - name: Create LLAMA_BUILD_COMPLETE file.
      ansible.builtin.file:
        path: "{{ working_dir }}/llama.cpp/LLAMA_BUILD_COMPLETE"
        state: touch
        mode: 0644
      become: true

    - name: Download a model to the models directory for testing.
      ansible.builtin.get_url:
        url: https://huggingface.co/bartowski/Llama-3.2-3B-Instruct-GGUF/resolve/main/Llama-3.2-3B-Instruct-Q4_K_M.gguf
        checksum: "sha256:6c1a2b41161032677be168d354123594c0e6e67d2b9227c84f296ad037c728ff"
        force: false
        dest: "{{ working_dir }}/llama.cpp/models/Llama-3.2-3B-Instruct-Q4_K_M.gguf"
        mode: 0644
      become: true

# CLEANUP FROM TOP500 PLAYBOOK
# - name: Configure SSH connections between nodes.
#   hosts: cluster
#   become: false
#   tags: ['ssh']

#   vars_files: ['config.yml']
#   vars:
#     host_ips: []

#   tasks:
#     - name: Ensure .ssh directory exists.
#       ansible.builtin.file:
#         path: "{{ ssh_user_home }}/.ssh"
#         state: directory
#         owner: "{{ ssh_user }}"
#         group: "{{ ssh_user }}"
#         mode: 0700

#     - name: Generate an OpenSSH keypair.
#       community.crypto.openssh_keypair:
#         path: "{{ ssh_user_home }}/.ssh/id_rsa"
#         size: 2048

#     - name: Read out ssh pubkey from each host.
#       ansible.builtin.command: cat "{{ ssh_user_home }}/.ssh/id_rsa.pub"
#       changed_when: false
#       register: ssh_pubkey

#     - name: Combine pubkeys into single list.
#       ansible.builtin.set_fact:
#         combined_ssh_pubkeys: "{{ ansible_play_hosts | map('extract', hostvars, 'ssh_pubkey') | map(attribute='stdout') | list }}"
#       run_once: true

#     - name: Write all pubkeys to each host.
#       ansible.posix.authorized_key:
#         user: "{{ ssh_user }}"
#         state: present
#         key: "{{ item }}"
#       loop: "{{ combined_ssh_pubkeys }}"

#     - name: Generate list of host IP addresses.
#       ansible.builtin.set_fact:
#         host_ips: "{{ host_ips + [ hostvars[item].ansible_default_ipv4.address ] }}"
#       loop: "{{ groups['cluster'] }}"

#     - name: Accept hostkeys for each host on each host.
#       ansible.builtin.command: >-
#         ssh {{ ssh_user }}@{{ item }} -o StrictHostKeyChecking=accept-new date
#       loop: "{{ host_ips }}"

#     - name: Write chunk of hosts information to the hosts file.
#       ansible.builtin.blockinfile:
#         path: /etc/hosts
#         marker: "# {mark} Ansible MPI host {{ item }}"
#         block: |
#           {{ hostvars[item].ansible_default_ipv4.address }} {{ item }} {{ item | replace('.local', '') }}
#       loop: "{{ groups['cluster'] }}"
#       become: true

- name: Run AI benchmark.
  hosts: cluster
  become: false
  tags: ['benchmark']

  vars_files: ['config.yml']
  vars:
    host_ips: []

  tasks:
    - name: Quick benchmark on each node.
      ansible.builtin.command:
        cmd: >-
          build/bin/llama-cli -m "models/Llama-3.2-3B-Instruct-Q4_K_M.gguf" -no-cnv -p "Why is the blue sky blue?" -e -ngl 100 -t 4
        chdir: "{{ working_dir }}/llama.cpp"
      register: quick_benchmark_run
      when: llama_quick_benchmark

    - name: Output quick benchmark results.
      ansible.builtin.debug:
        msg: "{{ quick_benchmark_run.stderr_lines | select('regex', '^llama_perf_context_print') | list }}"
      when: llama_quick_benchmark

    - name: Start llama.cpp in RPC mode on all secondary nodes.
      meta: noop

    # CLEANUP FROM TOP500 PLAYBOOK
    # - name: Create a file describing nodes for MPI execution.
    #   ansible.builtin.template:
    #     src: templates/mpi-node-config.j2
    #     dest: "{{ hpl_root }}/tmp/hpl-2.3/bin/top500/cluster-hosts"
    #     mode: 0644

    # # Template originally generated using this website:
    # # https://www.advancedclustering.com/act_kb/tune-hpl-dat-file/
    # - name: Create HPL.dat file.
    #   ansible.builtin.template:
    #     src: templates/HPL.dat.j2
    #     dest: "{{ hpl_root }}/tmp/hpl-2.3/bin/top500/HPL.dat"
    #     mode: 0644

    # - name: Generate list of host IP addresses.
    #   ansible.builtin.set_fact:
    #     host_ips: "{{ host_ips + [ hostvars[item].ansible_default_ipv4.address ] }}"
    #   loop: "{{ groups['cluster'] }}"

    # # If this is not done, the nodes will fail to connect to each other
    # # causing the playbook to hang at 'Run the benchmark.'
    # - include_tasks: tasks/firewall-configure.yml
    #   when: ansible_os_family == "RedHat"

    # - name: Run the benchmark.
    #   ansible.builtin.command: >-
    #     "{{ hpl_root }}/mpich/bin/mpirun" -f cluster-hosts ./xhpl
    #   args:
    #     chdir: "{{ hpl_root }}/tmp/hpl-2.3/bin/top500"
    #   register: mpirun_output
    #   run_once: true

    # - include_tasks: tasks/firewall-reset.yml
    #   when: ansible_os_family == "RedHat"

    # - name: Output the results.
    #   debug: var=mpirun_output.stdout
    #   run_once: true
